version: '3'

services:
  app2:
    build:
      context: .
      dockerfile: ./Dockerfile  # Use the same Dockerfile as the first app
    command: sh -c "chmod +x bin/rails && bin/rails db:migrate RAILS_ENV=development && rm -f tmp/pids/server.pid && bundle exec rails s -p 3001 -b '0.0.0.0'"  # Adjust port to 3001 for the second app
    volumes:
      - .:/app
    environment:
      RAILS_ENV: development
      POSTGRES_HOST: postgresql_app2  # Use a different hostname for the second database instance
      POSTGRES_USER: postgres_app2    # Use a different username for the second database instance
      POSTGRES_PASSWORD: postgres_app2    # Use a different password for the second database instance
      POSTGRES_DB: app2_database   # Use a different database name for the second database instance
    ports:
      - "3001:3001"  # Map container's port 3001 to host's port 3001 for the second app
    networks:
      - barmenu_network
    depends_on:
      - postgresql_app2  # Update dependency name for the second database instance

  postgresql_app2:  # Define a new service for the second PostgreSQL database instance
    container_name: postgres_app2  # Use a different container name for the second database instance
    image: postgres:latest
    hostname: postgres_app2  # Use a different hostname for the second database instance
    environment:
      POSTGRES_USER: postgres_app2  # Use a different username for the second database instance
      POSTGRES_PASSWORD: postgres_app2  # Use a different password for the second database instance
      POSTGRES_DB: app2_database  # Use a different database name for the second database instance
    ports:
      - "5433:5432"  # Map container's port 5432 to host's port 5433 for the second database
    volumes:
      - postgres_data_app2:/var/lib/postgresql/data  # Use a different volume for the second database instance
    networks:
      - barmenu_network

networks:
  barmenu_network:
    driver: bridge

volumes:
  postgres_data_app2:
